[{"title":"万字长文，一文搞懂TCP、IP和HTTP、HTTPS","slug":"万字长文，一文搞懂tcp、ip和http、https","date":"2021-03-18T03:21:43.000Z","updated":"2021-04-04T03:56:34.508Z","comments":true,"path":"2021/03/18/万字长文，一文搞懂tcp、ip和http、https/","link":"","permalink":"http://example.com/2021/03/18/%E4%B8%87%E5%AD%97%E9%95%BF%E6%96%87%EF%BC%8C%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82tcp%E3%80%81ip%E5%92%8Chttp%E3%80%81https/","excerpt":"","text":"认识HTTP： TCP三次握手和四次挥手： TCP/IP概念 TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP协议不仅仅指的是TCP 和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇，同时是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。我的理解： 互联网中的设备要相互通信，必须基于相同的方式，比如由哪一方发起通讯，使用什么语言进行通讯，怎么结束通讯这些都要事先确定，不同设备之间的通讯都需要一种规则，我们将这种规则成为协议。 TCP/IP 的分层管理图 TCP/IP协议中最重要的特点就是分层。由上往下分别为 应用层，传输层，网络层，数据链路层，物理层。当然也有按不同的模型分为4层或者7层的。 为什么要分层呢？在设计的角度来讲变得灵活了，当某一层需要修改时，只需要拿掉对相应的层，实现可拔插，无需变动所有层。对于使用者来讲，屏蔽了底层复杂的传输过程。 应用层TCP/IP模型将OSI参考模型中的会话层和表示层的功能合并到应用层实现。这一层主要的代表有DNS域名解析/http协议 传输层在TCP/IP模型中，传输层的功能是使源端主机和目标端主机上的对等实体可以进行会话。在传输层定义了两种服务质量不同的协议。即：传输控制协议TCP和用户数据报协议UDP. 网络层网络层是整个TCP/IP协议栈的核心。它的功能是把分组发往目标网络或主机。同时，为了尽快地发送分组，可能需要沿不同的路径同时进行分组传递。因此，分组到达的顺序和发送的顺序可能不同，这就需要上层必须对分组进行排序。网络层定义了分组格式和协议，即IP协议（Internet Protocol ）。 物理层该层负责 比特流在节点之间的传输，即负责物理传输，这一层的协议既与链路有关，也与传输的介质有关。通俗来说就是把计算机连接起来的物理手段。 数据链路层控制网络层与物理层之间的通信，主要功能是保证物理线路上进行可靠的数据传递。为了保证传输，从网络层接收到的数据被分割成特定的可被物理层传输的帧。帧是用来移动数据结构的结构包，他不仅包含原始数据，还包含发送方和接收方的物理地址以及纠错和控制信息。其中的地址确定了帧将发送到何处，而纠错和控制信息则确保帧无差错到达。如果在传达数据时，接收点检测到所传数据中有差错，就要通知发送方重发这一帧。 UDP 和 TCP 的特点: 用户数据报协议 UDP（User Datagram Protocol）:无连接；尽最大努力的交付；面向报文；无拥塞控制；支持一对一、一对多、多对一、多对多的交互通信；首部开销小(只有四个字段：源端口、目的端口、长度、检验和)。UDP是面向报文的传输方式是应用层交给UDP多长的报文，UDP发送多长的报文，即一次发送一个报文。因此，应用程序必须选择合适大小的报文。 传输控制协议 TCP（Transmission Control Protocol）:面向连接；每一个TCP连接只能是点对点的(一对一)；提供可靠交付服务；提供全双工通信；面向字节流。应用程序和TCP的交互是一次一个数据块(大小不等)，但TCP把应用程序看成是一连串的无结构的字节流。TCP有一个缓冲，当应该程序传送的数据块太长，TCP就可以把它划分短一些再传送。 UDP的首部格式: 用户数据报有两个字段：数据字段和首部字段，数据字段很简单，只有8个字节，由四个字段组成，每个字段的长度都是两个字节。各字段意义如下： 源端口： 源端口号，在需要给对方回信时使用。不需要是可全用0. 目的端口号： 这在终点交付报文时必须使用。 长度： 用户数据报UDP的长度，最小为8（仅首部）。 校验和： 用于校验用户数据报在传输过程是否出错，出错则丢弃该报文。 TCP报文首部格式: 源端口和目的端口: 各占两个字节，分别写入源端口号和目的端口号。序号 ： 占4个字节；用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。确认号 ： 占4个字节；期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。数据偏移 ： 占4位；指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。确认 ACK ： 当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。同步 SYN ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。终止 FIN ： 用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。窗口 ： 占2字节；窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。检验和： 占2个字节；检验和字段检验的范围包括首部和数据这两个部分。在计算检验和时，在TCP报文段的前面加上12字节的伪首部。套接字： TCP连接的端点叫做套接字或插口。端口号拼接到IP地址即构成了套接字。 面试灵魂拷问TCP的三次握手与四次挥手： 第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。 第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。 第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。 为什么要进行三次握手呢? 第三次握手是为了防止失效的连接请求到达服器，让服务器错误打开连接。客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。如果此时变成两次挥手行不行？举个打电话的例子，比如：第一次握手：A给B打电话说，你可以听到我说话吗？第二次握手：B收到了A的信息，然后对A说：我可以听得到你说话啊，你能听得到我说话吗？第三次握手：A收到了B的信息，然后说可以的，我要给你发信息啦！结论：在三次握手之后，A和B都能确定这么一件事：我能听到你，你也能听到我。这样，就可以开始正常通信了。如果是两次，那将无法确定。 当数据传送完毕,断开连接就需要进行TCP的四次挥手： 第一次挥手，客户端设置seq和 ACK ,向服务器发送一个 FIN(终结)报文段。此时，客户端进入 FIN_WAIT_1状态，表示客户端没有数据要发送给服务端了。 第二次挥手，服务端收到了客户端发送的 FIN 报文段，向客户端回了一个 ACK 报文段。 第三次挥手，服务端向客户端发送FIN 报文段，请求关闭连接，同时服务端进入 LAST_ACK 状态。 第四次挥手，客户端收到服务端发送的 FIN 报文段后，向服务端发送 ACK 报文段,然后客户端进入 TIME_WAIT状态。服务端收到客户端的 ACK 报文段以后，就关闭连接。此时，客户端等待2MSL（指一个片段在网络中最大的存活时间）后依然没有收到回复，则说明服务端已经正常关闭，这样客户端就可以关闭连接了。四次挥手 最后完整的过程图 为什么要四次挥手？客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。HTTP持久连接如果有大量的连接，每次在连接，关闭都要经历三次握手，四次挥手，这显然会造成性能低下。因此。Http 有一种叫做 长连接（keepalive connections） 的机制。它可以在传输数据后仍保持连接，当客户端需要再次获取数据时，直接使用刚刚空闲下来的连接而无需再次握手。 HTTP和HTTPS什么是HTTP? 超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。 HTTP特点： 无状态：协议对客户端没有状态存储，对事物处理没有“记忆”能力，比如访问一个网站需要反复进行登录操作。 无连接：HTTP/1.1之前，由于无状态特点，每次请求需要通过TCP三次握手四次挥手，和服务器重新建立连接。比如某个客户机在短时间多次请求同一个资源，服务器并不能区别是否已经响应过用户的请求，所以每次需要重新响应请求，需要耗费不必要的时间和流量。 基于请求和响应：基本的特性，由客户端发起请求，服务端响应。 简单快速、灵活。 通信使用明文、请求和响应不会对通信方进行确认、无法保护数据的完整性。 HTTP报文组成: 请求行：包括请求方法、URL、协议/版本 请求头(Request Header) 请求正文 状态行 响应头 响应正文 HTTP的缺点： 通信使用明文（不加密），内容可能会被窃听。 不验证通信方的身份，因此有可能遭遇伪装。 无法证明报文的完整性，所以有可能已遭篡改。 什么是HTTPS? HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。 HTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用SSL（Secure Socket Layer）和 TLS（Transport Layer Security）协议代替而已。通常，HTTP 直接和 TCP 通信。当使用 SSL时，则演变成先和 SSL通信，再由 SSL和 TCP 通信了。简言之，所谓 HTTPS，其实就是身披SSL协议这层外壳的 HTTP。 HTTPS通讯方式： 客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。 Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。 客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。 客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。 Web服务器利用自己的私钥解密出会话密钥。 Web服务器利用会话密钥加密与客户端之间的通信。 为什么HTTPS安全 SSL不仅提供加密处理，加密方式为混合加密。 SSL而且还使用了一种被称为证书的手段，可用于确定方。证书由值得信任的第三方机构颁发，用以证明服务器和客户端是实际存在的。另外，伪造证书从技术角度来说是异常困难的一件事。所以只要能够确认通信方（服务器或客户端）持有的证书。 加密方法 对称加密：加密和解密同用一个密钥的方式称为共享密钥加密（Common keycrypto system），也被叫做对称密钥加密. 对成加密的方式效率比较低，加密速度慢。另外对称加密存在安全隐患的问题，堆成加密的密钥必须要传到对方对方才能解密，要是对方在密钥传输的过程获取到密钥，那不是密钥失去了加密的意义，所以完全使用对称加密也是不安全的。 非对称加密：公开密钥加密使用一对非对称的密钥。一把叫做私有密钥（private key），另一把叫做公开密钥（public key）。顾名思义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。公钥加密，私钥解密使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。 那么非对称个加密就一定安全吗？非对称加密也不安全，为什么呢？因为存在中间伪造公钥和私钥，假如在公钥传给对方的时候，有人获取到公钥，虽然她不能用你的公钥做什么，但是它截获公钥后，把自己伪造的公钥发送给对方，这样对方获取的就不是真正的公钥，当对方用公钥进行加密文件，再将文件发送给对方，这样即使截获人没有获取到真正的私钥，但是加密时的公钥是截获人的，他获取到加密文件，只需要用自己的私钥进行解密就成功获取到文件了。 混合加密机制（对称加密与非对称加密结合的方式）顾名思义也就是对称加密和非对称加密的方式相结合。 如何证明公开没要本身的真实性。因为在公开秘钥传输的过程中，可能真正的公开秘钥已经被攻击者替换掉了。 为了解决上述问题，于是除了CA认证证书。服务器将CA证书发送给客户端，以进行公开密钥加密方式通信。接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，客户端便可明确两件事： 一：认证服务器的公开密钥的是真实有效的数字证书认证机构； 二：服务器的公开密钥是值得信赖的。 那么公开密钥如何交接给客户端是一件非常重要的事，因此多数浏览器开发商发布版本时，会事先在内部植入常用认证机关的公开密钥，这样就确保公钥是使用认证机构的公钥避免了公钥伪造的过程，进而确保了安全。","categories":[{"name":"鹤鹤","slug":"鹤鹤","permalink":"http://example.com/categories/%E9%B9%A4%E9%B9%A4/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-03-03T14:32:27.500Z","updated":"2021-03-03T14:32:27.500Z","comments":true,"path":"2021/03/03/hello-world/","link":"","permalink":"http://example.com/2021/03/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"ora2pg工具完成oracle 到 postgresql迁移过程(前奏安装)","slug":"ora2pg工具完成oracle-到-postgresql迁移过程前奏安装","date":"2021-02-04T03:14:52.000Z","updated":"2021-04-04T03:56:34.505Z","comments":true,"path":"2021/02/04/ora2pg工具完成oracle-到-postgresql迁移过程前奏安装/","link":"","permalink":"http://example.com/2021/02/04/ora2pg%E5%B7%A5%E5%85%B7%E5%AE%8C%E6%88%90oracle-%E5%88%B0-postgresql%E8%BF%81%E7%A7%BB%E8%BF%87%E7%A8%8B%E5%89%8D%E5%A5%8F%E5%AE%89%E8%A3%85/","excerpt":"","text":"一、ORA2PG初始化数据1.1、安装ora2pg12345yum install perl-ExtUtils-CBuilder perl-ExtUtils-MakeMakertar -jxf ora2pg-20.0.tar.bz2cd ora2pg-20.0&#x2F;perl Makefile.PLmake &amp;&amp; make install 1.2、安装DBD:ORACLE驱动12345678910yum -y install perl-Time-HiResexport ORACLE_HOME&#x3D;&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_1&#x2F;export LD_LIBRARY_PATH&#x3D;&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_1&#x2F;lib&#x2F; perl -MCPAN -e shellinstall DBItar -zxvf DBD-Oracle-1.80.tar.gzperl Makefile.PLmakemake testmake install ps：这里提供一下~/.bash_profile的配置 12345678910111213#export ORACLE_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;oracle&#x2F;12.1&#x2F;client64#export TNS_ADMIN&#x3D;$ORACLE_HOME&#x2F;network&#x2F;admin#export LD_LIBRARY_PATH&#x3D;$ORACLE_HOME&#x2F;lib:&#x2F;usr&#x2F;local&#x2F;lib:$LD_LIBRARY_PATH:.#export PATH&#x3D;$ORACLE_HOME:$PATHexport ORACLE_BASE&#x3D;&#x2F;opt&#x2F;craneexport ORACLE_HOME&#x3D;&#x2F;opt&#x2F;crane&#x2F;instantclient_12_1export LD_LIBRARY_PATH&#x3D;$ORACLE_HOM&#x2F;libexport LD_LIBRARY_PATH&#x3D;$ORACLE_HOME:$LD_LIBRARY_PATHexport TNS_ADMIN&#x3D;$ORACLE_HOME&#x2F;network&#x2F;adminexport NLS_LANG&#x3D;american_america.zhs16gbkexport PATH&#x3D;$ORACLE_HOME:$PATH: 二、问题记录1、索引中字段有#号1234psql:&#x2F;target&#x2F;TABLE_bethune.sql:2070: ERROR: syntax error at or near &quot;#&quot;LINE 1: ...wr_segobj_bid_sid ON rd_db_awr_segobj (batchid, ts#, obj#, d... ^2070 CREATE INDEX idx_r_db_awr_segobj_bid_sid ON rd_db_awr_segobj (batchid, ts#, obj#, dataobj#); 将ora2pg生成的脚本中ts#加上双引号。 2、索引中包含字符连接1234psql:&#x2F;target&#x2F;TABLE_bethune.sql:3055: ERROR: syntax error at or near &quot;&quot;LINE 1: ...id_own_name ON rd_db_indpart (batchid, index_ownerindex_na...CREATE INDEX idx_r_db_indp_bid_own_name ON rd_db_indpart (batchid, index_owner, index_name); PG不支持。 3、ORA-0409812345678910ERROR at line 1:ORA-04098: trigger &#39;SR_O2P.SR_DDL_TRIGGER_AFTER&#39; is invalid and failedre-validationSQL&gt; alter system set &quot;_system_trig_enabled&quot;&#x3D;false;System altered.SQL&gt; drop user sr_o2p cascade;User dropped.SQL&gt; alter system set &quot;_system_trig_enabled&quot;&#x3D;true;System altered. 4、ERROR: relation does not exist12345678910111213141516171819ize[628] apply_state[2] - (sr_apply.c:544)[2019-06-26 15:19:30:622851] [ERROR] sr_db_libpq_execute_stmt(): errcode[42P01] errbuf[ERROR: relation &quot;SR_O2P.BX_RPT_SUGGESTIONS&quot; does not existLINE 1: INSERT INTO &quot;SR_O2P&quot;.&quot;BX_RPT_SUGGESTIONS&quot;(&quot;SUGGESTION_ID&quot;,&quot;T... ^] - (sr_db_libpq_ex.c:1136)testdb&#x3D;&gt; select count(*) from &quot;SR_O2P.BX_RPT_SUGGESTIONS&quot;;ERROR: relation &quot;SR_O2P.BX_RPT_SUGGESTIONS&quot; does not existLINE 1: select count(*) from &quot;SR_O2P.BX_RPT_SUGGESTIONS&quot;; ^testdb&#x3D;&gt; select count(*) from SR_O2P.&quot;BX_RPT_SUGGESTIONS&quot;;ERROR: relation &quot;sr_o2p.BX_RPT_SUGGESTIONS&quot; does not existLINE 1: select count(*) from SR_O2P.&quot;BX_RPT_SUGGESTIONS&quot;; ^testdb&#x3D;&gt; select count(*) from SR_O2P.BX_RPT_SUGGESTIONS; count ------- 0(1 row) 将write_obj.list中表加上双引号。 123ize[628] apply_state[2] - (sr_apply.c:544)[2019-06-26 15:32:36:294734] [ERROR] sr_db_libpq_execute_stmt(): errcode[42703] errbuf[ERROR: column &quot;SUGGESTION_ID&quot; of relation &quot;bx_rpt_suggestions&quot; does not existLINE 1: INSERT INTO &quot;sr_o2p&quot;.&quot;bx_rpt_suggestions&quot;(&quot;SUGGESTION_ID&quot;,&quot;T... 将所有字段名称改为大写： 1select &#39;ALTER TABLE sr_o2p.&#39;c.relname &#39; RENAME &#39;a.attname&#39; TO &quot;&#39;upper(a.attname)&#39;&quot;;&#39; FROM pg_class c,pg_attribute a WHERE c.relname in(&#39;bx_rpt_suggestions&#39;,&#39;pd_db_info&#39;,&#39;rd_os_info&#39;,&#39;rd_db_inst&#39;,&#39;pd_db_ts&#39;,&#39;pd_db_awr_dbtime&#39;,&#39;pd_db_awr_sysstat&#39;,&#39;pd_db_logswitch&#39;) and a.attnum &gt; 0 and a.attrelid &#x3D; c.oid ORDER BY 1; 5、invalid input syntax for integer:12386] [ERROR] sr_db_libpq_execute_stmt(): errcode[22P02] errbuf[ERROR: invalid input syntax for integer: &quot;1533.18&quot;] - (sr_db_libpq_ex.c:1136)[2019-06-26 16:16:19:913437] [ERROR] sr_apply_execute_tx_partial(): Error(rc&#x3D;-1) in sr_db_tar_execute_stmt(): xid[a.a.875] scn[2750939.1] sql[INSERT INTO &quot;sr_o2p&quot;.&quot;pd_db_awr_dbtime&quot;(&quot;BATCHID&quot;,&quot;INSTANCE_NAME&quot;,&quot;SNAP_TIME&quot;,&quot;CLASS&quot;,&quot;TIME_SEC&quottype[2008] - (sr_apply.c:617) ora2pg生成的脚本问题，需要将bigint改为double，小数。 12ALTER TABLE sr_o2p.pd_db_awr_dbtime ALTER COLUMN &quot;TIME_SEC&quot; TYPE double precision ; 6、ERROR: no partition of relation found for row1234567891011121314151617181920212223242526272829[2019-06-26 16:22:24:528724] [ERROR] sr_db_libpq_execute_stmt(): errcode[23514] errbuf[ERROR: no partition of relation &quot;pd_db_awr_dbtime&quot; found for rowDETAIL: Partition key of the failing row contains (&quot;BATCHID&quot;) &#x3D; (431).--sourge oracle CREATE TABLE &quot;BT_PROD&quot;.&quot;PD_DB_AWR_DBTIME&quot; (&quot;BATCHID&quot; NUMBER, &quot;INSTANCE_NAME&quot; VARCHAR2(16 BYTE), &quot;SNAP_TIME&quot; TIMESTAMP (6), &quot;CLASS&quot; VARCHAR2(64 BYTE), &quot;TIME_SEC&quot; NUMBER, SUPPLEMENTAL LOG DATA (ALL) COLUMNS ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 STORAGE( BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE &quot;BAYMAX&quot; PARTITION BY RANGE (&quot;BATCHID&quot;) INTERVAL (1000) --target postgresCREATE TABLE sr_o2p.pd_db_awr_dbtime( &quot;BATCHID&quot; bigint, &quot;INSTANCE_NAME&quot; character varying(16) COLLATE pg_catalog.&quot;default&quot;, &quot;SNAP_TIME&quot; timestamp without time zone, &quot;CLASS&quot; character varying(64) COLLATE pg_catalog.&quot;default&quot;, &quot;TIME_SEC&quot; double precision) PARTITION BY RANGE (&quot;BATCHID&quot;) WITH ( OIDS &#x3D; FALSE)TABLESPACE pg_default; 需要创建子分区 123. Create partition child tableCREATE TABLE pd_db_awr_dbtime_100 PARTITION OF pd_db_awr_dbtime FOR VALUES FROM (0) TO (100);","categories":[{"name":"鹤鹤","slug":"鹤鹤","permalink":"http://example.com/categories/%E9%B9%A4%E9%B9%A4/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"http://example.com/tags/oracle/"}]},{"title":"Linux查看网络流量","slug":"linux查看网络流量","date":"2021-01-18T02:21:49.000Z","updated":"2021-04-04T03:56:34.502Z","comments":true,"path":"2021/01/18/linux查看网络流量/","link":"","permalink":"http://example.com/2021/01/18/linux%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F/","excerpt":"","text":"查看总流量ipip 命令来自 iproute2util 包，是查看、配置网络/路由的工具。作为 ifconfig 的替代品，ip 命令功能更强大，用法更语义化。 ip命令在大多数系统上都已经默认安装，也可通过 yum install -y iproute 安装。ip 的 “-s -h“ 参数查看各网卡的总流量，下图是 ip -s -h link 的输出结果： nloadnload 命令可以查看各个网络设备的当前网络速率，也会展示流经设备的总流量。 nload 来自EPEL软件库，CentOS安装命令为：yum install -y epel-release &amp;&amp; yum install -y nload。查看eth0网卡流量 nload eth0命令输出如下： PS：netstat -s 和 ifconfig -s 都可以查看收发的总包(netstat分协议给出)，但不会给出字节数据。 查看实时网速网速nload 命令可以输出当前网速，上面已经介绍过，本节不再赘述。 dstatdstat 是一个用来替换vmstat、iostat、netstat、nfsstat和ifstat的全能系统信息统计工具，支持数据实时刷新，输出直观易懂。 dstat 默认没有安装，安装命令为：yum install -y dstat。dstat -tnf 1 10 输出接下来10秒内每秒的网络数据： sarsar 是System Activity Report的缩写，是一款全面的Linux系统运行状态统计和性能分析工具，可从磁盘IO、CPU负载、内存使用等多个维度对系统活动进行报告。 sar 命令来自 sysstat 包，可使用这个命令安装：yum install -y sysstat。sar -n TCP 1 10可查看接下来10秒内的tcp数据： 查看连接/进程流量ss/netstatss 和 netstat 是查看活动链接/监听端口的常用命令。ss 是 netstat 的替代，性能更好，建议使用。 ss 是 iproute2util 包的一部分，因此在大多数系统上默认安装，也可通过yum install -y iproute安装。netstat 来自 net-tools 包，新版系统上需要自行安装：yum install -y net-tools。 下图是用ss查看tcp连接的输出： iftopiftop 是一款实时流量监控工具，可以查看每个连接的实时速率。 iftop 来自EPEL软件库，安装命令是：yum install -y epel-release &amp;&amp; yum install -y iftop。iftop -nN -i eth0实时查看eth0网卡的各个连接和网速： nethogsnethogs 是为了查看单个进程流量而设计的工具，按照进程进行带宽分组。 nethogs 来自EPEL软件库，安装命令是：yum install -y epel-release &amp;&amp; yum install -y nethogs。nethogs -d 2 eth0 每2秒刷新流经eth0网卡的进程流量信息： 其他tcpdump可以用来抓包，保存的数据可以用wireshark打开和查看。 摘自：https://segmentfault.com/a/1190000022275523","categories":[{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"},{"name":"鹤鹤","slug":"鹤鹤","permalink":"http://example.com/categories/%E9%B9%A4%E9%B9%A4/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"Oracle迁移数据：ora2pg使用指南","slug":"oracle迁移数据：ora2pg使用指南","date":"2020-11-23T09:11:40.000Z","updated":"2021-04-04T03:56:34.499Z","comments":true,"path":"2020/11/23/oracle迁移数据：ora2pg使用指南/","link":"","permalink":"http://example.com/2020/11/23/oracle%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%EF%BC%9Aora2pg%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/","excerpt":"","text":"一、安装ora2pg1.1 安装OS依赖软件包1[root@pg07 ~]# yum install perl-DBD-Pg perl perl-devel perl-DBI perl-CPAN bzip2 perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker 1.2 安装Oracle瘦客户端从Oracle官方网站下载oracle 12c的瘦客户端，然后进行安装并配置。 1234567891011[root@pg07 u02]# la &#x2F;u02&#x2F;software&#x2F;oracle&#x2F;total 55Mdrwxr-xr-x 2 root root 4.0K Dec 3 15:04 .drwxr-xr-x 7 root root 76 Dec 3 15:04 ..-rw-r--r-- 1 root root 51M Nov 28 14:34 oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm-rw-r--r-- 1 root root 593K Nov 28 14:32 oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm-rw-r--r-- 1 root root 1.5M Nov 28 14:32 oracle-instantclient12.2-jdbc-12.2.0.1.0-1.x86_64.rpm-rw-r--r-- 1 root root 692K Nov 28 14:32 oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm-rw-r--r-- 1 root root 922K Nov 28 14:35 oracle-instantclient12.2-tools-12.2.0.1.0-1.x86_64.rpm[root@pg07 ~]# yum -y localinstall &#x2F;u02&#x2F;software&#x2F;oracle&#x2F;oracle-instantclient12.2-*.rpm[root@pg07 ~]# mkdir -p &#x2F;usr&#x2F;lib&#x2F;oracle&#x2F;12.2&#x2F;client64&#x2F;network&#x2F;admin 编辑root环境变量，加入以下内容： 1234567[root@pg07 ~]# vi .bash_profile export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib&#x2F;oracle&#x2F;12.2&#x2F;client64&#x2F;libexport NLS_LANG&#x3D;AMERICAN_AMERICA.ZHS16GBKexport TNS_ADMIN&#x3D;&#x2F;usr&#x2F;lib&#x2F;oracle&#x2F;12.2&#x2F;client64&#x2F;network&#x2F;adminexport ORACLE_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;oracle&#x2F;12.2&#x2F;client64&#x2F;export PATH&#x3D;$PATH:$ORACLE_HOME&#x2F;bin:$HOME&#x2F;bin[root@pg07 ~]# source .bash_profile 1.3 安装ora2pg1234567891011121314151617181920212223242526272829303132[root@pg07 ~]# wget https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;ora2pg&#x2F;files&#x2F;19.1&#x2F;ora2pg-19.1.tar.bz2[root@pg07 ~]# tar -xjf ora2pg-19.1.tar.bz2 [root@pg07 ~]# cd ora2pg-19.1[root@pg07 ora2pg-19.1]# perl Makefile.PL Checking if your kit is complete...Looks goodWriting Makefile for Ora2PgDone...------------------------------------------------------------------------------Please read documentation at http:&#x2F;&#x2F;ora2pg.darold.net&#x2F; before asking for help------------------------------------------------------------------------------Now type: make &amp;&amp; make install[root@pg07 ora2pg-19.1]# make &amp;&amp; make installcp lib&#x2F;Ora2Pg.pm blib&#x2F;lib&#x2F;Ora2Pg.pmcp lib&#x2F;Ora2Pg&#x2F;GEOM.pm blib&#x2F;lib&#x2F;Ora2Pg&#x2F;GEOM.pmcp lib&#x2F;Ora2Pg&#x2F;PLSQL.pm blib&#x2F;lib&#x2F;Ora2Pg&#x2F;PLSQL.pmcp lib&#x2F;Ora2Pg&#x2F;MySQL.pm blib&#x2F;lib&#x2F;Ora2Pg&#x2F;MySQL.pmcp scripts&#x2F;ora2pg blib&#x2F;script&#x2F;ora2pg&#x2F;usr&#x2F;bin&#x2F;perl -MExtUtils::MY -e &#39;MY-&gt;fixin(shift)&#39; -- blib&#x2F;script&#x2F;ora2pgcp scripts&#x2F;ora2pg_scanner blib&#x2F;script&#x2F;ora2pg_scanner&#x2F;usr&#x2F;bin&#x2F;perl -MExtUtils::MY -e &#39;MY-&gt;fixin(shift)&#39; -- blib&#x2F;script&#x2F;ora2pg_scannerManifying blib&#x2F;man3&#x2F;ora2pg.3Installing &#x2F;usr&#x2F;local&#x2F;share&#x2F;perl5&#x2F;Ora2Pg.pmInstalling &#x2F;usr&#x2F;local&#x2F;share&#x2F;perl5&#x2F;Ora2Pg&#x2F;GEOM.pmInstalling &#x2F;usr&#x2F;local&#x2F;share&#x2F;perl5&#x2F;Ora2Pg&#x2F;PLSQL.pmInstalling &#x2F;usr&#x2F;local&#x2F;share&#x2F;perl5&#x2F;Ora2Pg&#x2F;MySQL.pmInstalling &#x2F;usr&#x2F;local&#x2F;share&#x2F;man&#x2F;man3&#x2F;ora2pg.3Installing &#x2F;usr&#x2F;local&#x2F;bin&#x2F;ora2pgInstalling &#x2F;usr&#x2F;local&#x2F;bin&#x2F;ora2pg_scannerInstalling default configuration file (ora2pg.conf.dist) to &#x2F;etc&#x2F;ora2pgAppending installation info to &#x2F;usr&#x2F;lib64&#x2F;perl5&#x2F;perllocal.pod 1.4 安装DBD::Oracle1234567891011121314151617181920212223242526272829303132333435363738394041424344[root@pg07 ~]# perl -MCPAN -e shellTerminal does not support AddHistory.cpan shell -- CPAN exploration and modules installation (v1.9800)Enter &#39;h&#39; for help.cpan[1]&gt; get DBD::OracleFetching with HTTP::Tiny:http:&#x2F;&#x2F;mirror.truenetwork.ru&#x2F;CPAN&#x2F;authors&#x2F;01mailrc.txt.gzReading &#39;&#x2F;root&#x2F;.cpan&#x2F;sources&#x2F;authors&#x2F;01mailrc.txt.gz&#39;............................................................................DONEFetching with HTTP::Tiny:http:&#x2F;&#x2F;mirror.truenetwork.ru&#x2F;CPAN&#x2F;modules&#x2F;02packages.details.txt.gzReading &#39;&#x2F;root&#x2F;.cpan&#x2F;sources&#x2F;modules&#x2F;02packages.details.txt.gz&#39; Database was generated on Wed, 28 Nov 2018 23:54:25 GMT HTTP::Date not available............. New CPAN.pm version (v2.16) available. [Currently running version is v1.9800] You might want to try install CPAN reload cpan to both upgrade CPAN.pm and run the new version without leaving the current session................................................................DONEFetching with HTTP::Tiny:http:&#x2F;&#x2F;mirror.truenetwork.ru&#x2F;CPAN&#x2F;modules&#x2F;03modlist.data.gzReading &#39;&#x2F;root&#x2F;.cpan&#x2F;sources&#x2F;modules&#x2F;03modlist.data.gz&#39;DONEWriting &#x2F;root&#x2F;.cpan&#x2F;MetadataRunning get for module &#39;DBD::Oracle&#39;Fetching with HTTP::Tiny:http:&#x2F;&#x2F;mirror.truenetwork.ru&#x2F;CPAN&#x2F;authors&#x2F;id&#x2F;Z&#x2F;ZA&#x2F;ZARQUON&#x2F;DBD-Oracle-1.76.tar.gzFetching with HTTP::Tiny:http:&#x2F;&#x2F;mirror.truenetwork.ru&#x2F;CPAN&#x2F;authors&#x2F;id&#x2F;Z&#x2F;ZA&#x2F;ZARQUON&#x2F;CHECKSUMSChecksum for &#x2F;root&#x2F;.cpan&#x2F;sources&#x2F;authors&#x2F;id&#x2F;Z&#x2F;ZA&#x2F;ZARQUON&#x2F;DBD-Oracle-1.76.tar.gz okScanning cache &#x2F;root&#x2F;.cpan&#x2F;build for sizesDONEcpan[2]&gt; quitTerminal does not support GetHistory.Lockfile removed.[root@pg07 ~]# cd .cpan&#x2F;build&#x2F;DBD-Oracle-1.76-sU5yu5&#x2F;[root@pg07 DBD-Oracle-1.76-sU5yu5]# perl Makefile.PL[root@pg07 DBD-Oracle-1.76-sU5yu5]# make &amp;&amp; make install 1.5 创建ora2pg配置文件首先从示例文件复制一份，然后根据实际情况更改配置文件相关参数： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127[root@pg07 ~]# cp &#x2F;etc&#x2F;ora2pg&#x2F;ora2pg.conf.dist &#x2F;etc&#x2F;ora2pg&#x2F;ora2pg.conf[root@pg07 ~]# vi &#x2F;etc&#x2F;ora2pg&#x2F;ora2pg.conf--Oracle连接参数ORACLE_HOME &#x2F;usr&#x2F;lib&#x2F;oracle&#x2F;12.2&#x2F;client64ORACLE_DSN dbi:Oracle:host&#x3D;172.16.100.19;sid&#x3D;kkdb;port&#x3D;1521ORACLE_USER system --如果这里的用户是sys、system，则user_grants选项必须设置为1ORACLE_PWD abcABC12USER_GRANTS 1ORA_INITIAL_COMMAND commit--schema参数EXPORT_SCHEMA 1SCHEMA XXKINCREATE_SCHEMA 0COMPILE_SCHEMA 0PG_SCHEMA public--导出对象(根据实际情况选择)TYPE TABLE COPY VIEW TYPE DISABLE_COMMENT 0EXTERNAL_TO_FDW 1TRUNCATE_TABLE 0USE_TABLESPACE 0REORDERING_COLUMNS 0--约束参数KEEP_PKEY_NAMES 0PKEY_IN_CREATE 0FKEY_ADD_UPDATE neverFKEY_DEFERRABLE 0DEFER_FKEY 0DROP_FKEY 1--触发器参数DISABLE_SEQUENCE 1DISABLE_TRIGGERS 1--对象修改参数PRESERVE_CASE 0INDEXES_RENAMING 0USE_INDEX_OPCLASS 0PREFIX_PARTITION 0DISABLE_PARTITION 1WITH_OID 0ORA_RESERVED_WORDS audit,commentUSE_RESERVED_WORDS 1DISABLE_UNLOGGED 0--PostgreSQL参数PG_DSN dbi:Pg:dbname&#x3D;kkdb;host&#x3D;192.168.120.149;port&#x3D;5432PG_USER xxkinPG_PWD redhatOUTPUT xxkin.sqlOUTPUT_DIR &#x2F;tmpBZIP2FILE_PER_CONSTRAINT 0FILE_PER_INDEX 0FILE_PER_FKEYS 0FILE_PER_TABLE 0FILE_PER_FUNCTION 0STOP_ON_ERROR 1COPY_FREEZE 0CREATE_OR_REPLACE 1--TYPE参数PG_NUMERIC_TYPE 1PG_INTEGER_TYPE 1DEFAULT_NUMERIC bigintENABLE_MICROSECOND 1TO_NUMBER_CONVERSION numericGEN_USER_PWD 0FORCE_OWNER 0FORCE_SECURITY_INVOKER 0--数据参数DATA_LIMIT 10000NOESCAPE 0TRANSACTION serializableSTANDARD_CONFORMING_STRINGS 1NO_LOB_LOCATOR 1XML_PRETTY 0LOG_ON_ERROR 0TRIM_TYPE BOTHINTERNAL_DATE_MAX 49FUNCTION_CHECK 1--Export&#x2F;Import性能参数JOBS 1ORACLE_COPIES 1PARALLEL_TABLES 1DEFAULT_PARALLELISM_DEGREE 0PARALLEL_MIN_ROWS 100000DROP_INDEXES 0SYNCHRONOUS_COMMIT 0--PLSQL参数EXPORT_INVALID 0PLSQL_PGSQL 1NULL_EQUAL_EMPTY 0EMPTY_LOB_NULL 0PACKAGE_AS_SCHEMA 1REWRITE_OUTER_JOIN 1FUNCTION_STABLE 1COMMENT_COMMIT_ROLLBACK 0COMMENT_SAVEPOINT 0USE_ORAFCE 0AUTONOMOUS_TRANSACTION 1--ASSESSMENT参数ESTIMATE_COST 0COST_UNIT_VALUE 5DUMP_AS_HTML 0TOP_MAX 10HUMAN_DAYS_LIMIT 5--PostgreSQL特性参数PG_SUPPORTS_WHEN 1PG_SUPPORTS_INSTEADOF 1PG_SUPPORTS_MVIEW 1PG_SUPPORTS_CHECKOPTION 1PG_SUPPORTS_IFEXISTS 1PG_SUPPORTS_LATERAL 1PG_SUPPORTS_PARTITION 1BITMAP_AS_GIN 1PG_BACKGROUND 0PG_SUPPORTS_SUBSTR 1PG_SUPPORTS_NAMED_OPERATOR 1PG_SUPPORTS_IDENTITY 1PG_SUPPORTS_PROCEDURE 0--SPATIAL参数AUTODETECT_SPATIAL_TYPE 1CONVERT_SRID 1DEFAULT_SRID 4326GEOMETRY_EXTRACT_TYPE INTERNAL--FDW参数FDW_SERVER orcl--MySQL参数MYSQL_PIPES_AS_CONCAT 0MYSQL_INTERNAL_EXTRACT_FORMAT 0 到此，整个ora2pg的安装配置已完成。 二、使用ora2pg2.1 导出全部表结构如果在配置文件里指定的type包含了COPY，导完表结构后，表的数据也会随之导出，加-t参数即可只导出表结构不导出数据。 1234[root@pg07 ~]# ora2pg -t table view[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;] 777&#x2F;777 tables (100.0%) end of scanning. [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;] 777&#x2F;777 tables (100.0%) end of table export. [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;] 0&#x2F;0 views (100.0%) end of output. 导出完成后，在PostgreSQL中创建数据库以及对应的表。 12345678910-bash-4.2$ psqlpsql (10.6)Type &quot;help&quot; for help.postgres&#x3D;# CREATE USER xxkin WITH password &#39;redhat&#39; CREATEDB SUPERUSER replication bypa***ls createrole login;postgres&#x3D;# create database kkdb;postgres&#x3D;# alter database kkdb owner to xxkin;postgres&#x3D;# \\c kkdbYou are now connected to database &quot;kkdb&quot; as user &quot;postgres&quot;.kkdb&#x3D;# \\i &#x2F;tmp&#x2F;output.sql ora2pg有很多参数可供使用，具体请参考其帮助文件。 2.2 通过ora2pg迁移数据之前已创建好数据库以及相关表结构，现在只需通过ora2pg将数据同步到PostgreSQL数据库上即可。 12345678910[root@pg07 ~]# ora2pg -d -t copy[2018-11-30 11:38:51] Ora2Pg version: 19.1[2018-11-30 11:38:51] Trying to connect to database: dbi:Oracle:host&#x3D;172.16.100.19;sid&#x3D;kkdb;port&#x3D;1521[2018-11-30 11:38:51] Isolation level: SET TRANSACTION ISOLATION LEVEL SERIALIZABLE[2018-11-30 11:38:51] DEBUG: executing initial command to Oracle: commit[2018-11-30 11:38:51] Retrieving table information...[2018-11-30 11:40:55] [1] Scanning table ABC_DEL_CLASS (1 rows)...[2018-11-30 11:40:55] [2] Scanning table ACTIVITY_DATA (41 rows)...[2018-11-30 11:40:55] [3] Scanning table ACTIVITY_GBEAN_STAT (243897 rows)......... 如果在迁移过程中，需要排除某些表，加-e参数，如下: 1[root@pg07 ~]# ora2pg -d -t copy -e usr_dx_tbs,hr_info_pg,op_log 如图，出现此打印结果，说明数据迁移成功。 总结：以下是在使用过程遇到的问题，提出的建议：1、先导出表结构，然后在同步数据；2、在导出表结构的时候禁用分区表；3、注意PostgreSQL的保留的关键字是否为oracle表字段名；4、删除所有外键约束。5、直接通过ora2pg迁移数据，不要将oracle表数据导出为csv格式，然后再导入PostgreSQL数据库。","categories":[{"name":"鹤鹤","slug":"鹤鹤","permalink":"http://example.com/categories/%E9%B9%A4%E9%B9%A4/"},{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"http://example.com/tags/oracle/"},{"name":"postgres","slug":"postgres","permalink":"http://example.com/tags/postgres/"}]},{"title":"世界，您好！","slug":"hello-world-1","date":"2020-11-23T01:38:33.000Z","updated":"2021-04-04T03:56:34.494Z","comments":true,"path":"2020/11/23/hello-world-1/","link":"","permalink":"http://example.com/2020/11/23/hello-world-1/","excerpt":"","text":"欢迎使用WordPress。这是您的第一篇文章。编辑或删除它，然后开始写作吧！","categories":[{"name":"其他","slug":"其他","permalink":"http://example.com/categories/%E5%85%B6%E4%BB%96/"}],"tags":[]}]